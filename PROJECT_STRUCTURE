# Project Structure Overview

## Top-Level Files
- `index.html` — HTML entry point that loads React and Tailwind from CDNs and mounts the quiz application into the `#root` element.【F:index.html†L1-L27】
- `package.json` — Declares project metadata and development tooling scripts (currently ESLint).【F:package.json†L1-L20】
- `eslint.config.js` — Configures ESLint rules for the project (see file for detailed setup).【F:eslint.config.js†L1-L68】
- `images/` — Static assets with plant photos referenced by quiz questions.【F:src/data/json/plantImages.json†L1-L40】

## Source Directory (`src/`)
- `index.js` — Bootstraps the React application by rendering `<PlantQuizGame />` into the DOM root.【F:src/index.js†L1-L5】
- `gameConfig.js` — Centralizes game constants (round definitions, language options), хранит историю просмотренных изображений в `localStorage` и содержит хелперы для подготовки раундов и отслеживания вьюпорта.【F:src/gameConfig.js†L1-L192】
  - `components/`
  - `PlantQuizGame.js` — Top-level component that wires game logic into either the in-round `GameScreen` or the post-round `ResultScreen`, переключает интерфейс между «Обычной» и «Бесконечной» игрой и передаёт в экран текущий режим.【F:src/components/PlantQuizGame.js†L1-L55】
  - `GameHeader.js` — Заголовок игрового экрана; показывает название выбранного режима и текущее количество очков.【F:src/components/GameHeader.js†L1-L52】
  - `GameMenu.js` — Домашний экран с кнопками запуска «Обычной» и «Бесконечной» игры и переключением языка.【F:src/components/GameMenu.js†L1-L82】
  - `GameScreen.js` — Renders the active quiz round UI, включая защищённую подачу изображений растений через компонент `SecurePlantImage`, отключающий контекстное меню и перетаскивание.【F:src/components/GameScreen.js†L5-L53】【F:src/components/GameScreen.js†L90-L205】
  - `ResultScreen.js` — Displays round-complete or game-complete summaries with навигацией и специализированными сообщениями для успеха/ошибок в бесконечном режиме.【F:src/components/ResultScreen.js†L1-L86】【F:src/components/ResultScreen.js†L88-L165】
- `hooks/`
  - `useGameLogic.js` — Custom hook that переключает между логикой «Обычной игры» и «Бесконечного режима», подготавливает параметры запуска и делегирует управление соответствующим специализированным хукам.【F:src/hooks/useGameLogic.js†L1-L88】【F:src/hooks/useGameLogic.js†L90-L207】
  - `useClassicMode.js` — Управляет раундами и очками классического режима (прогрессия сложность→сложность, подсчёт и завершение после трёх раундов).【F:src/hooks/useClassicMode.js†L1-L140】
  - `useEndlessMode.js` — Перемешивает весь каталог вопросов, начисляет +1/−2 балла и завершает сессию по исчерпанию вопросов либо при отрицательном счёте.【F:src/hooks/useEndlessMode.js†L1-L123】
  - `useSecureImageSource.js` — Fetches plant images as Blob URLs, кэширует и освобождает их по мере использования, скрывая оригинальные имена файлов от игроков.【F:src/hooks/useSecureImageSource.js†L1-L84】【F:src/hooks/useSecureImageSource.js†L86-L120】
- `data/`
  - `json/` — Каноничные источники данных: `plantNames.json`, `plantImages.json`, `speciesCatalog.json`, `genus.json`, агрегированный пакет `plantData.json`, а также таблицы `difficulties.json` и `bouquetQuestions.json` для букетов.【F:src/data/json/plantData.json†L1-L200】
  - `plantParameters.js` / `parameterTags.js` — Содержат дополнительные параметры растений и расшифровки тегов, которые дополняют JSON-данные в момент загрузки.【F:src/data/plantParameters.js†L1-L244】【F:src/data/parameterTags.js†L1-L82】
  - `questionTypes.js` / `questions.js` — Перечисление типов вопросов и преднастроенные подборки (например, букетные задания) поверх каталогизированных данных.【F:src/data/questionTypes.js†L1-L25】【F:src/data/questions.js†L1-L118】
- `game/`
  - `dataLoader.js` — Асинхронно подгружает `plantData.json`, нормализует роды и виды, строит кэшированные индексы (виды по идентификатору, списки вопросов, уровни сложности) и предоставляет API вроде `getDifficultyByQuestionId`. Все компоненты и скрипты теперь используют эти экспортированные структуры вместо отдельных модулей в `src/data/`.【F:src/game/dataLoader.js†L16-L198】【F:src/game/dataLoader.js†L480-L531】
- `i18n/`
  - `uiTexts.js` — Provides localized interface strings (Russian/English) and a helper to select language bundles.【F:src/i18n/uiTexts.js†L1-L28】【F:src/i18n/uiTexts.js†L30-L34】
- `utils/`
  - `random.js` — Utility helpers for shuffling arrays and picking random elements used in question/option selection.【F:src/utils/random.js†L1-L18】

## Application Flow Summary
1. `index.html` loads the React runtime; `src/index.js` mounts `PlantQuizGame`.
2. `PlantQuizGame` uses `useGameLogic` to manage quiz rounds and chooses between `GameScreen` (active round) and `ResultScreen` (between rounds or after completion).
3. `useGameLogic` получает структуры (`choicesById`, `ALL_CHOICE_IDS`) из `game/dataLoader.js`, который уже разворачивает родовые данные, наследует сложность и собирает списки вопросов. Хук использует эти данные совместно с `gameConfig.js` и `utils/random.js` для выборки, хранения и адаптации под устройство.【F:src/game/dataLoader.js†L480-L531】【F:src/hooks/useGameLogic.js†L1-L207】
4. UI text is localized via `i18n/uiTexts.js`, while language and viewport preferences persist using storage helpers in `gameConfig.js`.
